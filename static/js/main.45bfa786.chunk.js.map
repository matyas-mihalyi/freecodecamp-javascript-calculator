{"version":3,"sources":["components/Button.tsx","InputHook.tsx","App.tsx","index.tsx"],"names":["Button","props","type","value","functions","updateInput","deleteInput","resetInput","calculateResult","ids","className","onClick","id","useInput","useState","input","setInput","result","setResult","operators","a","b","calculate","arr","split","filter","item","calc","some","e","Object","keys","op","opindex","indexOf","find","length","num","parseFloat","toString","console","log","splice","unshift","Number","isInteger","number","precision","factor","Math","pow","round","precisionRound","char","inputArr","Array","from","lastChar","beforeLastChar","isNumber","character","test","isOperator","cases","newInput","map","join","slice","push","App","btnProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAeaA,EAAS,SAACC,GACrB,IAAOC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,UACbC,EAAyDD,EAAzDC,YAAaC,EAA4CF,EAA5CE,YAAaC,EAA+BH,EAA/BG,WAAYC,EAAmBJ,EAAnBI,gBAKvCC,EAAgB,CACpB,EAAG,MACH,EAAG,MACH,EAAG,QACH,EAAG,OACH,EAAG,OACH,EAAG,MACH,EAAG,QACH,EAAG,QACH,EAAG,OACH,EAAG,OACH,IAAK,MACL,IAAK,WACL,IAAK,WACL,IAAK,SACL,IAAK,WAKP,OAAOP,GACL,IAAK,SACH,OAAO,wBAAQQ,UAAU,iCAAiCR,KAAK,SAASS,QAAS,kBAAKN,EAAYF,IAAQS,GAAIH,EAAIN,GAA3G,SAAoHA,IAC7H,IAAK,WACH,OAAOA,GACL,IAAK,IACH,OAAO,wBAAQO,UAAU,yBAAyBR,KAAK,SAASS,QAAS,kBAAKH,KAAmBI,GAAG,SAA7F,SAAuGT,IAChH,IAAK,QACH,OAAO,wBAAQO,UAAU,mCAAmCR,KAAK,SAASS,QAAS,kBAAKJ,KAAcK,GAAG,QAAlG,gBACT,QACE,OAAO,wBAAQF,UAAU,gCAAgCR,KAAK,SAASS,QAAS,kBAAKN,EAAYF,IAAQS,GAAIH,EAAIN,GAA1G,SAAmHA,IAEhI,IAAK,SACH,OAAO,wBAAQO,UAAU,iCAAiCR,KAAK,SAASS,QAAS,kBAAKL,KAA/E,SAA+FH,IACxG,QACE,OAAO,wBAAQO,UAAU,yBAAyBR,KAAK,SAAhD,SAA0DC,M,OCtD1DU,EAAW,WAEtB,MAA0BC,mBAAiB,KAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAA4BF,mBAAiB,IAA7C,mBAAOG,EAAP,KAAeC,EAAf,KA4DA,SAASX,IACPS,EAAS,KACTE,EAAU,IAkBZ,IAAMC,EAAsB,CAC1B,IAAK,SAASC,EAAGC,GAAK,OAAOD,EAAIC,GACjC,IAAK,SAASD,EAAGC,GAAK,OAAOD,EAAIC,GACjC,IAAK,SAASD,EAAGC,GAAK,OAAOD,EAAIC,GACjC,IAAK,SAASD,EAAGC,GAAK,OAAOD,EAAIC,IAGnC,SAASC,EAAWP,GAgBlB,IAAMQ,EAAMR,EAAMS,MAAM,cAAcC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAOrD,SAASC,EAAMJ,GACb,KAAOA,EAAIK,MAAK,SAACC,GAAD,OAAcC,OAAOC,KAAKZ,GAAWS,MAAK,SAAAI,GAAE,OAAIA,IAAOH,SAAK,CAI1E,IAAMI,EAAUV,EAAIW,QAAQX,EAAIY,MAAK,SAACN,GAAD,OAAcC,OAAOC,KAAKZ,GAAWS,MAAK,SAAAI,GAAE,OAAIA,IAAOH,SAI5F,GAAgB,IAAZI,GAAgC,IAAfV,EAAIa,OACvB,MAKF,GAAuB,MAAnBb,EAAIU,EAAQ,GAAY,CAG1B,IAAMI,EAAMlB,EAAUI,EAAIU,IAAUK,WAAWf,EAAIU,EAAQ,KAAoC,EAA/BK,WAAWf,EAAIU,EAAQ,KAAYM,WACnGC,QAAQC,IAAR,iBAAsBJ,IAEtBd,EAAImB,OAAO,EAAE,GAGbnB,EAAIoB,QAAQN,OAGP,CAEL,IAAMA,EAAMlB,EAAUI,EAAIU,IAAUK,WAAWf,EAAIU,EAAQ,IAAKK,WAAWf,EAAIU,EAAQ,KAAKM,WAG5FhB,EAAImB,OAAO,EAAE,GAGbnB,EAAIoB,QAAQN,IAKd,OAAOO,OAAOC,UAAUD,OAAOrB,EAAI,KACjCA,EAAI,GAAGgB,WA7Db,SAAwBO,EAAgBC,GAEpC,GAAIA,EAAY,EAChB,CACE,IAAIC,EAASC,KAAKC,IAAI,GAAIH,GAC1B,OAAOE,KAAKE,MAAML,EAASE,GAAUA,EAGrC,QAASC,KAAKE,MAAMP,OAAOE,EAAS,KAAOC,IACzC,KAAOA,GAsDTK,CAAeR,OAAOrB,EAAI,IAAK,GAAGgB,WAhDpCT,OAAOC,KAAKZ,GAAWS,MAAK,SAAAI,GAAE,OAAIA,IAAOT,EAAI,OAAkB,KAAXN,GACtDM,EAAIoB,QAAQ1B,GAoDdC,EAAUS,EAAKJ,IACfiB,QAAQC,IAAI1B,GACZC,EAASW,EAAKJ,IAQhB,MAAO,CAACR,QAAOE,SAAQZ,YApKvB,SAAsBgD,GACpB,IAAMC,EAAWC,MAAMC,KAAKzC,GACtB0C,EAAWH,EAASA,EAASlB,OAAS,GACtCsB,EAAiBJ,EAASA,EAASlB,OAAS,GAC5CuB,EAAW,SAACC,GAAD,MAAsB,KAAKC,KAAKD,IAC3CE,EAAa,SAACF,GAAD,MAAsB,UAAUC,KAAKD,IAElDG,EACiC,IAApBT,EAASlB,QAAgC,MAAhBkB,EAAS,KAAgBK,EAASN,IAAmB,MAAVA,GADjFU,EAEgC,IAApBT,EAASlB,QAAgC,MAAhBkB,EAAS,IAAwB,MAATD,EAF7DU,EAGiBD,EAAWL,IAAcK,EAAWT,IAAkB,MAATA,GAAgC,MAAbI,GAA6B,MAATJ,GAAgC,MAAbI,GAA6B,MAATJ,EAH5IU,EAIiB,MAATV,GAAgB,YAAYQ,KAAK9C,GAJzCgD,GAKQ,gBAAgBF,KAAK9C,GAEb+C,EAAWL,IAAaK,EAAWJ,IAAmBI,EAAWT,IAPjFU,EAQWhD,IAAUE,GAAU0C,EAASN,GAG9C,IAAGU,EAAH,CAIA,GAAIA,EAGF,OAFA7C,EAAU,SACVF,EAASqC,GAIX,GAAIU,EAAsB,CACxB,IAAMC,EAAWV,EAASW,KAAI,SAAApC,GAAC,OAAIwB,KACnCb,QAAQC,IAAI,sBACZzB,EAASgD,EAASE,KAAK,UAEpB,GAAIH,EACP/C,EAASD,EAAQsC,QAEd,GAAIU,EAAwB,CAC/B,IAAMC,EAAWV,EAASa,MAAM,EAAGb,EAASlB,OAAS,GACrDI,QAAQC,IAAI,wBACZuB,EAASI,KAAKf,GACdrC,EAASgD,EAASE,KAAK,UAEpB,GAAKH,EAAyB,CACjC,IAAMC,EAAWV,EAASa,MAAM,EAAGb,EAASlB,OAAS,GACrDI,QAAQC,IAAR,+BAAoCuB,IACpCA,EAASI,KAAKf,GACdb,QAAQC,IAAR,8BAAmCuB,IACnCxB,QAAQC,IAAI,oCACZzB,EAASgD,EAASE,KAAK,UAGvBlD,EAASD,EAAQsC,KAiHe/C,YAvGpC,WACE,GAAc,MAAVS,EAEG,GAAqB,IAAjBA,EAAMqB,QAA0B,MAAVrB,EAC/BR,QACK,CACL,IAAMyD,EAAWT,MAAMC,KAAKzC,GAAOoD,MAAM,EAAGpD,EAAMqB,OAAS,GAAG8B,KAAK,IACnElD,EAASgD,KAgGoCzD,aAAYC,gBAL7D,WACEc,EAAUP,MClHCsD,MApDf,WACE,MAA+ExD,IAAxEE,EAAP,EAAOA,MAAOE,EAAd,EAAcA,OAERqD,EAAW,CAACjE,YAFlB,EAAsBA,YAESC,YAF/B,EAAmCA,YAESC,WAF5C,EAAgDA,WAEQC,gBAFxD,EAA4DA,iBAK5D,OACE,qBAAKE,UAAU,2DAAf,SACE,sBAAKA,UAAU,oGAAf,UAEI,sBAAKE,GAAG,kBAAkBF,UAAU,YAApC,UACE,qBAAKE,GAAG,UAAUF,UAAU,MAA5B,SAAmCK,IACnC,sBAAMH,GAAG,aAAT,SAAuBK,OAIzB,sBAAKL,GAAG,iBAAiBF,UAAU,yEAAnC,UACE,sBAAKA,UAAU,8CAAf,UACE,cAAC,EAAD,CAAQR,KAAK,WAAWC,MAAM,QAAQC,UAAWkE,IACjD,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,MAAMC,UAAWkE,IAC7C,cAAC,EAAD,CAAQpE,KAAK,WAAWC,MAAM,IAAIC,UAAWkE,OAE/C,sBAAK5D,UAAU,8CAAf,UACE,cAAC,EAAD,CAAQR,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,WAAWC,MAAM,IAAIC,UAAWkE,OAE/C,sBAAK5D,UAAU,8CAAf,UACE,cAAC,EAAD,CAAQR,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,WAAWC,MAAM,IAAIC,UAAWkE,OAE/C,sBAAK5D,UAAU,8CAAf,UACE,cAAC,EAAD,CAAQR,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,WAAWC,MAAM,IAAIC,UAAWkE,OAE/C,sBAAK5D,UAAU,8CAAf,UACE,cAAC,EAAD,CAAQR,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,SAASC,MAAM,IAAIC,UAAWkE,IAC3C,cAAC,EAAD,CAAQpE,KAAK,WAAWC,MAAM,IAAIC,UAAWkE,gBC3C3DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.45bfa786.chunk.js","sourcesContent":["type ButtonType = \"number\" | \"operator\" | \"equals\" | \"delete\";\r\ntype ButtonFuncitons = {\r\n  updateInput(char:string):void, \r\n  deleteInput():void,\r\n  resetInput():void,\r\n  calculateResult():void\r\n}\r\n\r\ntype ButtonProps = {\r\n  type?:ButtonType; \r\n  value: string;\r\n  functions:ButtonFuncitons;\r\n}\r\n\r\n\r\nexport const Button = (props:ButtonProps) => {\r\n  const {type, value, functions} = props;\r\n  const {updateInput, deleteInput, resetInput, calculateResult} = functions;\r\n\r\n  type ButtonIds = {\r\n    [propName:string|number]:string\r\n  }\r\n  const ids:ButtonIds = {\r\n    1: \"one\",\r\n    2: \"two\",\r\n    3: \"three\",\r\n    4: \"four\",\r\n    5: \"five\",\r\n    6: \"six\",\r\n    7: \"seven\",\r\n    8: \"eight\",\r\n    9: \"nine\",\r\n    0: \"zero\",\r\n    '+': \"add\",\r\n    '-': \"subtract\",\r\n    '*': \"multiply\",\r\n    '/': \"divide\",\r\n    '.': \"decimal\"\r\n  }\r\n\r\n\r\n\r\n  switch(type) {\r\n    case 'number':\r\n      return <button className=\"calc-btn num-btn col-3 rounded\" type=\"button\" onClick={()=> updateInput(value)} id={ids[value]}>{value}</button>\r\n    case 'operator':\r\n      switch(value) {\r\n        case '=':\r\n          return <button className=\"calc-btn col-6 rounded\" type=\"button\" onClick={()=> calculateResult()} id=\"equals\">{value}</button>\r\n        case 'reset':\r\n          return <button className=\"calc-btn reset-btn col-6 rounded\" type=\"button\" onClick={()=> resetInput()} id=\"clear\">AC</button>\r\n        default:\r\n          return <button className=\"calc-btn op-btn col-3 rounded\" type=\"button\" onClick={()=> updateInput(value)} id={ids[value]}>{value}</button>\r\n      }\r\n    case 'delete':\r\n      return <button className=\"calc-btn del-btn col-3 rounded\" type=\"button\" onClick={()=> deleteInput()}>{value}</button>  \r\n    default:\r\n      return <button className=\"calc-btn col-3 rounded\" type=\"button\">{value}</button>\r\n  }  \r\n    \r\n\r\n}","import { useState } from \"react\";\r\n\r\n\r\nexport const useInput = () => {\r\n\r\n  const [input, setInput] = useState<string>(\"0\");\r\n\r\n  const [result, setResult] = useState<string>(\"\");\r\n\r\n\r\n\r\n  function updateInput (char:string) {\r\n    const inputArr = Array.from(input);\r\n    const lastChar = inputArr[inputArr.length - 1];\r\n    const beforeLastChar = inputArr[inputArr.length - 2];\r\n    const isNumber = (character:string) => /\\d/.test(character);\r\n    const isOperator = (character:string) => /[-+*/.]/.test(character);\r\n\r\n    const cases = {\r\n      replaceInitial: (inputArr.length === 1 && inputArr[0] === \"0\") && (isNumber(char) || char === (\"-\"||\"+\")),\r\n      dotAfterZero: ((inputArr.length === 1 && inputArr[0] === \"0\") && char === \".\"),\r\n      multipleOperators: ((isOperator(lastChar) && (isOperator(char) && char !== \"-\")) || (lastChar === \"-\" && char === \"-\")) || (lastChar === \"+\" && char === \"-\"),\r\n      secondDot: (char === \".\" && /\\d+\\.\\d+$/.test(input)),\r\n      noOperator:(/^\\d+[+\\-*/]?$/.test(input)),\r\n      noPrevoiusResult:(result === \"\"),\r\n      twoOperatorsAtEnd: (isOperator(lastChar) && isOperator(beforeLastChar) && isOperator(char)),\r\n      numAfterCalc: (input === result && isNumber(char))\r\n    };\r\n    \r\n    if(cases.secondDot) {\r\n      return\r\n    }\r\n\r\n    if (cases.numAfterCalc) {\r\n      setResult(\"\");\r\n      setInput(char);\r\n      return\r\n    }\r\n   \r\n    if (cases.replaceInitial) {\r\n      const newInput = inputArr.map(e => char)\r\n      console.log(\"initial 0 replaced\");\r\n      setInput(newInput.join(''));\r\n    } \r\n    else if (cases.dotAfterZero) {\r\n      setInput(input + char);\r\n    } \r\n    else if (cases.twoOperatorsAtEnd){\r\n      const newInput = inputArr.slice(0, inputArr.length - 2);\r\n      console.log(\"two operators at end\");\r\n      newInput.push(char);\r\n      setInput(newInput.join(''));\r\n    }\r\n    else if  (cases.multipleOperators) {\r\n      const newInput = inputArr.slice(0, inputArr.length - 1);\r\n      console.log(`newInput before push ${newInput}`);\r\n      newInput.push(char);\r\n      console.log(`newInput after push ${newInput}`);\r\n      console.log(\"operators cant follow each other\");\r\n      setInput(newInput.join(''));\r\n    } \r\n    else {\r\n      setInput(input + char)\r\n    }\r\n\r\n  }\r\n\r\n  function resetInput () {\r\n    setInput(\"0\");\r\n    setResult(\"\");\r\n  }\r\n\r\n  function deleteInput () {\r\n    if (input === \"0\") {\r\n      return\r\n    } else if (input.length === 1 && input !== \"0\") {\r\n      resetInput();\r\n    } else {\r\n      const newInput = Array.from(input).slice(0, input.length - 1).join(\"\");\r\n      setInput(newInput);\r\n    }\r\n  }\r\n\r\n  type Operation = (a:number, b: number) => number\r\n  type Operators={\r\n    [propName: string]:Operation;\r\n  }\r\n  const operators:Operators = {\r\n    '+': function(a, b) { return a + b },\r\n    '-': function(a, b) { return a - b },\r\n    '*': function(a, b) { return a * b },\r\n    '/': function(a, b) { return a / b }\r\n  };\r\n\r\n  function calculate (input:string) {\r\n \r\n    //https://expertcodeblog.wordpress.com/2018/02/12/typescript-javascript-round-number-by-decimal-pecision/\r\n    function precisionRound(number: number, precision: number)\r\n      {\r\n        if (precision < 0)\r\n        {\r\n          let factor = Math.pow(10, precision);\r\n          return Math.round(number * factor) / factor;\r\n        }\r\n        else\r\n          return +(Math.round(Number(number + \"e+\" + precision)) +\r\n            \"e-\" + precision);\r\n      }\r\n\r\n\r\n    const arr = input.split(/([^\\d\\.?])/).filter(item => item !== \"\");\r\n    \r\n    if (Object.keys(operators).some(op => op === arr[0]) && result !== \"\") {\r\n      arr.unshift(result);\r\n    }\r\n    // console.log(`arr is ${arr}`)\r\n\r\n    function calc (arr:string[]) {\r\n      while (arr.some((e:string) => Object.keys(operators).some(op => op === e))) {\r\n        // console.log(`arr is ${arr} at while loop beginning`)\r\n        \r\n        //find next operator in input string\r\n        const opindex = arr.indexOf(arr.find((e:string) => Object.keys(operators).some(op => op === e))!);\r\n        // console.log(`opindex is ${opindex}`);\r\n        \r\n        //if next operator is the last character in the input, ignore it\r\n        if (opindex === 1 && arr.length === 2) {\r\n          break\r\n        }\r\n        \r\n\r\n        //if next number is positive\r\n        if (arr[opindex+1] === \"-\") {\r\n          // console.log(`next number is negative`)\r\n          \r\n          const num = operators[arr[opindex]](parseFloat(arr[opindex-1]), parseFloat(arr[opindex+2]) * (-1)).toString();\r\n          console.log(`num is ${num}`)\r\n          \r\n          arr.splice(0,4);\r\n          // console.log(`arr is ${arr} after splicing`)\r\n          \r\n          arr.unshift(num);\r\n          // console.log(`arr is ${arr} after unshift`)\r\n        //if next number is positive\r\n        } else {\r\n          // console.log(`next number is positive`)\r\n          const num = operators[arr[opindex]](parseFloat(arr[opindex-1]), parseFloat(arr[opindex+1])).toString();\r\n          // console.log(`num is ${num}`)\r\n          \r\n          arr.splice(0,3);\r\n          // console.log(`arr is ${arr} after splicing`)\r\n          \r\n          arr.unshift(num);\r\n          // console.log(`arr is ${arr} after unshift`)\r\n        }\r\n        \r\n      } \r\n        return Number.isInteger(Number(arr[0])) ?\r\n          arr[0].toString() \r\n          :\r\n          precisionRound(Number(arr[0]), 5).toString();\r\n        ;\r\n      } \r\n    // console.log(`end of calculation is ${calc(arr)}`)\r\n    // console.log(`end of calculation is ${calc(arr)}`)\r\n    setResult(calc(arr));\r\n    console.log(input)\r\n    setInput(calc(arr));\r\n  }\r\n\r\n  function calculateResult() {\r\n    calculate(input);\r\n  }\r\n\r\n\r\n  return {input, result, updateInput, deleteInput, resetInput, calculateResult}\r\n}","import React from 'react';\nimport './App.css';\nimport { Button } from './components/Button';\nimport { useInput } from './InputHook';\n\nfunction App() {\n  const {input, result, updateInput, deleteInput, resetInput, calculateResult} = useInput();\n\n  const btnProps = {updateInput, deleteInput, resetInput, calculateResult}\n\n\n  return (\n    <div className=\"row align-items-center justify-content-center min-vh-100\">\n      <div className=\"calculator-wrapper col-xs-10 col-sm-8 col-lg-6 col-xl-3 rounded d-flex flex-column pt-3 pb-4 px-3\">\n        {/* DISPLAY */}\n          <div id=\"display-wrapper\" className=\"my-2 mx-3\">\n            <div id=\"display\" className=\"p-2\">{input}</div>\n            <span id=\"prev-value\">{result}</span>\n          </div>\n        {/* DISPLAY */}\n        {/* KEYPAD */}\n          <div id=\"keypad-wrapper\" className=\"container-fluid d-flex flex-column flex-grow-1 justify-content-between\">\n            <div className=\"row flex-grow-1 p-1 justify-content-between\">\n              <Button type=\"operator\" value=\"reset\" functions={btnProps}/>\n              <Button type=\"delete\" value=\"del\" functions={btnProps}/>\n              <Button type=\"operator\" value=\"/\" functions={btnProps}/>\n            </div>\n            <div className=\"row flex-grow-1 p-1 justify-content-between\">\n              <Button type=\"number\" value=\"7\" functions={btnProps}/>\n              <Button type=\"number\" value=\"8\" functions={btnProps}/>\n              <Button type=\"number\" value=\"9\" functions={btnProps}/>\n              <Button type=\"operator\" value=\"*\" functions={btnProps}/>\n            </div>\n            <div className=\"row flex-grow-1 p-1 justify-content-between\">\n              <Button type=\"number\" value=\"4\" functions={btnProps}/>\n              <Button type=\"number\" value=\"5\" functions={btnProps}/>\n              <Button type=\"number\" value=\"6\" functions={btnProps}/>\n              <Button type=\"operator\" value=\"-\" functions={btnProps}/>\n            </div>\n            <div className=\"row flex-grow-1 p-1 justify-content-between\">\n              <Button type=\"number\" value=\"1\" functions={btnProps}/>\n              <Button type=\"number\" value=\"2\" functions={btnProps}/>\n              <Button type=\"number\" value=\"3\" functions={btnProps}/>\n              <Button type=\"operator\" value=\"+\" functions={btnProps}/>\n            </div>\n            <div className=\"row flex-grow-1 p-1 justify-content-between\">\n              <Button type=\"number\" value=\"0\" functions={btnProps}/>\n              <Button type=\"number\" value=\".\" functions={btnProps}/>\n              <Button type=\"operator\" value=\"=\" functions={btnProps}/>\n            </div>\n          </div>\n        {/* KEYPAD */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}